void Add_register() { //既受験者の試験結果登録
        char* err_msg = NULL;
        int ret;
        char sql[1024];
        char name[59];
        char furigana[59];
        char date_input[16];
        SetConsoleOutputCP(CP_UTF8);  // 出力をUTF-8に設定
        SetConsoleCP(CP_UTF8);

        sqlite3* db = DB_connect();
        if (!db) {
            fprintf(stderr, "データベース接続に失敗しました。\n");
            return;
        }

        printf("ふりがなを入力してください（すべてひらがな）: ");
        if (scanf("%58s", furigana) != 1) {
            fprintf(stderr, "ふりがなの入力に失敗しました。\n");
            sqlite3_close(db);
            return;
        }
        // ふりがなが存在するか確認→確認取れたら試験情報の追加登録画面へ
            snprintf(sql, sizeof(sql),
                // テーブル結合
                "SELECT e.examinee_name, e.furigana, s.subject_name, sc.score, ex.exam_date "
                "FROM examinee e "
                "JOIN exam ex ON e.examinee_id = ex.examinee_id "
                "JOIN score sc ON ex.exam_id = sc.exam_id "
                "JOIN subjects s ON sc.subject_id = s.subject_id "
                "WHERE e.furigana = '%s';", furigana);


            CallbackData cb_data = { 0, 0 };

            ret = sqlite3_exec(db, sql, print_callback, &cb_data, &err_msg);

            if (ret != SQLITE_OK) {
                fprintf(stderr, "SQL error: %s\n", err_msg);
                sqlite3_free(err_msg);
            }
            else if (cb_data.count == 0) {
                printf("該当するデータが見つかりませんでした。\n");
                return;
            }
            /*if (!is_hiragana(furigana)) {
                printf("ふりがなはすべてひらがなで入力してください。\n");
                continue;
            }*/
        
        int exam_date = 0;

        // 試験日入力
        printf("試験日を半角8桁で入力してください（例: 20250501）: ");
        if (scanf("%15s", date_input) != 1) {
            clear_stdin();
            fprintf(stderr, "試験日入力失敗。\n");
            return 0;
        }
        //8桁以外の数字を弾く
        if (strlen(date_input) != 8 || strspn(date_input, "0123456789") != 8) {
            fprintf(stderr, "試験日は8桁の半角数字で入力してください。\n");
            return 0;
        }
        exam_date = atoi(date_input);
        int year = exam_date / 10000;
        int month = (exam_date / 100) % 100;
        int day = exam_date % 100;
        const char* subjects[] = { "国語", "数学", "英語" };
        const char* choicesubjects_1[] = { "日本史", "世界史", "地理", "物理", "化学", "生物" };
        int basicscore[3];
        int choice_subject_score[2];
        int choicenumber_1 = -1, choicenumber_2 = -1;

        // 科目毎の点数入力処理
        for (int i = 0; i < 3; i++) {
            while (1) {
                printf("%sの点数を入力してください (0〜100): ", subjects[i]);
                if (scanf("%d", &basicscore[i]) != 1) {
                    fprintf(stderr, "数値入力失敗。\n");
                    return 1;
                }
                if (basicscore[i] >= 0 && basicscore[i] <= 100) break;
                printf("0〜100の範囲で入力してください。\n");
            }
        }
        // 文系選択科目入力
        printf("選択科目（文系）を1つ選んでください:\n");
        for (int i = 0; i < 3; i++) {
            printf("%d: %s\n", i + 1, choicesubjects_1[i]);
        }
        while (1) {
            printf("番号を入力 (1〜3): ");
            if (scanf("%d", &choicenumber_1) != 1) {
                fprintf(stderr, "番号の入力に失敗しました。\n");
                return 1;
            }
            if (choicenumber_1 >= 1 && choicenumber_1 <= 3)
                break;
            printf("正しい番号を入力してください。\n");
        }
        // 理系選択科目入力
        printf("選択科目（理系）を1つ選んでください:\n");
        for (int i = 3; i < 6; i++) {
            printf("%d: %s\n", i + 1, choicesubjects_1[i]);
        }
        while (1) {
            printf("番号を入力 (4〜6): ");
            if (scanf("%d", &choicenumber_2) != 1) {
                fprintf(stderr, "番号の入力に失敗しました。\n");
                return 1;
            }
            if (choicenumber_2 >= 4 && choicenumber_2 <= 6)
                break;
            printf("正しい番号を入力してください。\n");
        }

        // 文系選択科目の点数入力
        printf("%sの点数を入力してください (0〜100): ", choicesubjects_1[choicenumber_1 - 1]);
        while (1) {
            if (scanf("%d", &choice_subject_score[0]) != 1) {
                fprintf(stderr, "点数入力失敗\n");
                return 1;
            }
            if (choice_subject_score[0] >= 0 && choice_subject_score[0] <= 100)
                break;
            printf("正しい点数を入力してください。\n");
        }
        // 理系選択科目の点数入力
        printf("%sの点数を入力してください (0〜100): ", choicesubjects_1[choicenumber_2 - 1]);
        while (1) {
            if (scanf("%d", &choice_subject_score[1]) != 1) {
                fprintf(stderr, "点数入力失敗\n");
                return 1;
            }
            // 0点以上100点以外を入力→再入力
            if (choice_subject_score[1] >= 0 && choice_subject_score[1] <= 100) break;
            printf("正しい点数を入力してください。\n");
        }
        //入力内容確認画面(help:名前とフリガナ反映されないです)
        SetConsoleOutputCP(CP_UTF8);  // 出力をUTF-8に設定
        SetConsoleCP(CP_UTF8);
        printf("\n入力内容の確認:\n");
        printf("名前:%s\n", name);
        printf("ふりがな:%s\n", furigana);
        printf("受験日: %d年%02d月%02d日\n", year, month, day);

        for (int i = 0; i < 3; i++) {
            printf("%s: %d点\n", subjects[i], basicscore[i]);
        }
        printf("%s: %d点\n", choicesubjects_1[choicenumber_1 - 1], choice_subject_score[0]);
        printf("%s: %d点\n", choicesubjects_1[choicenumber_2 - 1], choice_subject_score[1]);

        int ok;
        printf("1 を入力すると登録、2 でキャンセル: ");
        if (scanf("%d", &ok) != 1) {
            fprintf(stderr, "確認の入力に失敗しました。\n");
            return 1;
        }
        if (ok == 1) {
            printf("登録中です\n");
        }
        else if (ok == 2) {
            sqlite3_close(db);
            return;
        }
        else {
            sqlite3_close(db);
        }

        // INSERT 処理
        snprintf(sql, sizeof(sql),
            "SELECT examinee_id FROM examinee WHERE furigana = '%s';", furigana);
        sqlite3_stmt * stmt;
        ret = sqlite3_prepare_v2(db, sql, -1, &stmt, NULL);
        if (ret != SQLITE_OK) {
            fprintf(stderr, "SELECT文の準備に失敗しました: %s\n", sqlite3_errmsg(db));
            sqlite3_close(db);
            return 1;
        }

        int examinee_id = -1;
        if (sqlite3_step(stmt) == SQLITE_ROW) {
            // 既存の examinee_id を取得
            examinee_id = sqlite3_column_int(stmt, 0);
        }
        sqlite3_finalize(stmt);

        // 存在しない場合のみ INSERT
        if (examinee_id == -1) {
            snprintf(sql, sizeof(sql),
                "INSERT INTO examinee (examinee_name, furigana) VALUES ('%s', '%s');", name, furigana);
            ret = sqlite3_exec(db, sql, 0, 0, &err_msg);
            if (ret != SQLITE_OK) {
                fprintf(stderr, "examinee の挿入エラー: %s\n", err_msg);
                sqlite3_free(err_msg);
                sqlite3_close(db);
                return 1;
            }
            examinee_id = (int)sqlite3_last_insert_rowid(db);
        }

        snprintf(sql, sizeof(sql),
            "INSERT INTO exam (examinee_id, exam_date) VALUES (%d, %d);", examinee_id, exam_date);
        ret = sqlite3_exec(db, sql, 0, 0, &err_msg);
        if (ret != SQLITE_OK) {
            fprintf(stderr, "exam の挿入エラー: %s\n", err_msg);
            sqlite3_free(err_msg);
            sqlite3_close(db);
            return 1;
        }
        int exam_id = (int)sqlite3_last_insert_rowid(db);

        // 必須科目登録
        for (int i = 0; i < 3; i++) {
            snprintf(sql, sizeof(sql),
                "INSERT INTO score (exam_id, examinee_id,subject_id, score) VALUES (%d, %d, %d, %d);",
                exam_id, examinee_id, i + 1, basicscore[i]);
            ret = sqlite3_exec(db, sql, 0, 0, &err_msg);
            if (ret != SQLITE_OK) {
                fprintf(stderr, "score (必須) の挿入エラー: %s\n", err_msg);
                sqlite3_free(err_msg);
                sqlite3_close(db);
                return 1;
            }
        }

        // 文系選択科目登録
        snprintf(sql, sizeof(sql),
            "INSERT INTO score (exam_id, examinee_id,subject_id, score) VALUES (%d, %d, %d, %d);",
            exam_id, examinee_id, choicenumber_1 + 3, choice_subject_score[0]);
        sqlite3_exec(db, sql, 0, 0, NULL);

        // 理系選択科目登録
        snprintf(sql, sizeof(sql),
            "INSERT INTO score (exam_id, examinee_id, subject_id, score) VALUES (%d, %d, %d, %d);",
            exam_id, examinee_id, choicenumber_2 + 3, choice_subject_score[1]);
        sqlite3_exec(db, sql, 0, 0, NULL);

        printf("登録が完了しました\n");
        sqlite3_close(db);

        return 0;
    }